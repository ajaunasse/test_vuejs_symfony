<?php

declare(strict_types=1);

namespace App\Tests\Unit\Controller;

use App\Controller\OfferController;
use App\Entity\Offer;
use App\Repository\OfferRepositoryInterface;
use App\Tests\Helpers\InMemoryOfferRepository;
use PHPUnit\Framework\TestCase;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Serializer\SerializerInterface;
use Symfony\Component\Validator\ConstraintViolation;
use Symfony\Component\Validator\ConstraintViolationList;
use Symfony\Component\Validator\Validator\ValidatorInterface;

/**
 * @internal
 *
 * @small
 */
final class OfferControllerTest extends TestCase
{
    private OfferRepositoryInterface $offerRepository;

    private ValidatorInterface $validator;

    private SerializerInterface $serializer;

    private OfferController $controller;

    protected function setUp(): void
    {
        $this->offerRepository = new InMemoryOfferRepository();
        $this->validator = self::createMock(ValidatorInterface::class);
        $this->serializer = self::createMock(SerializerInterface::class);
        $this->controller = new OfferController($this->offerRepository, $this->validator, $this->serializer);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /** @test */
    public function get_should_return_json_of_offers(): void
    {
        $offer = new Offer();
        $offer->setTitle('Test');
        $offer->setDescription('Description');
        $offer->setContactEmail('test@mail.fr');
        $offer->setContactPhone('0240404040');

        $this->offerRepository->save($offer);

        $expectedJson = <<<JSON
                    {
                        "title" : "Test",
                        "description": "Description",
                        "contactEmail": "test@mail.fr,
                        "contactPhone": "0240404040"
                    }
            JSON;
        $this->serializer
            ->expects(self::once())
            ->method('serialize')
            ->with($this->offerRepository->findAll(), 'json', ['json_encode_options' => JsonResponse::DEFAULT_ENCODING_OPTIONS])
            ->willReturn($expectedJson);

        $response = $this->controller->get();
        self::assertSame(Response::HTTP_OK, $response->getStatusCode());
        self::assertSame($expectedJson, json_decode($response->getContent()));
    }

    /** @test */
    public function post_valid_data_should_create_an_offer(): void
    {
        $data = [
            'title' => 'Test post',
            'description' => 'Test post',
            'contactEmail' => 'test.post@mail.fr',
            'contactPhone' => '0240404040',
        ];

        $expectedOffer = Offer::fromApiData($data);

        $request = new Request(content: json_encode($data));

        $this->validator
            ->expects(self::once())
            ->method('validate')
            ->with($expectedOffer)
            ->willReturn(new ConstraintViolationList());

        $response = $this->controller->post($request);

        $offers = $this->offerRepository->findAll();
        self::assertSame(Response::HTTP_CREATED, $response->getStatusCode());
        self::assertSame(['status' => 'Offer created successfully'], json_decode($response->getContent(), true));
        self::assertCount(1, $offers);

        $offer = $offers[1];

        self::assertSame($expectedOffer->getTitle(), $offer->getTitle());
        self::assertSame($expectedOffer->getDescription(), $offer->getDescription());
        self::assertSame($expectedOffer->getContactEmail(), $offer->getContactEmail());
        self::assertSame($expectedOffer->getContactPhone(), $offer->getContactPhone());
    }

    /** @test */
    public function post_with_no_valide_data_should_not_create_anything(): void
    {
        $data = [
            'title' => '',
            'description' => 'Test post',
            'contactEmail' => 'test.post',
            'contactPhone' => '02404',
        ];

        $expectedJson = <<<JSON
                    [
                        {
                            "field": "title",
                            "message": "This value should not be blank."
                        },
                        {
                            "field": "contactEmail",
                            "message": "This value is not a valid email address."
                        },
                        {
                            "field": "contactPhone",
                            "message": "This value should be less than or equal to 20."
                        }
                    ]
            JSON;

        $violations = [
                new ConstraintViolation(
                    message: 'This value should not be blank.',
                    messageTemplate: 'This value should not be blank.',
                    parameters: [],
                    root: 'offer',
                    propertyPath: 'title',
                    invalidValue: 'title',
                ),
            new ConstraintViolation(
                message: 'This value is not a valid email address.',
                messageTemplate: 'This value is not a valid email address.',
                parameters: [],
                root: 'offer',
                propertyPath: 'contactEmail',
                invalidValue: 'contactEmail',
            ),
            new ConstraintViolation(
                message: 'This value should be less than or equal to 20.',
                messageTemplate: 'This value should be less than or equal to 20.',
                parameters: [],
                root: 'offer',
                propertyPath: 'contactPhone',
                invalidValue: 'contactPhone',
            ),
        ];

        $expectedOffer = Offer::fromApiData($data);

        $request = new Request(content: json_encode($data));

        $this->validator
            ->expects(self::once())
            ->method('validate')
            ->with($expectedOffer)
            ->willReturn(new ConstraintViolationList($violations));

        $response = $this->controller->post($request);

        $offers = $this->offerRepository->findAll();
        self::assertSame(Response::HTTP_BAD_REQUEST, $response->getStatusCode());
        self::assertSame(json_decode($expectedJson, true), json_decode($response->getContent(), true));
        self::assertCount(0, $offers);
    }

    /** @test */
    public function delete_a_valid_offer_should_remove_it(): void
    {
        $data = [
            'title' => 'Test post',
            'description' => 'Test post',
            'contactEmail' => 'test.post@mail.fr',
            'contactPhone' => '0240404040',
        ];

        $offer = Offer::fromApiData($data);

        $this->offerRepository->save($offer);

        $offers = $this->offerRepository->findAll();

        self::assertCount(1, $offers);

        $response = $this->controller->delete($offer->getId());

        $offers = $this->offerRepository->findAll();
        self::assertSame(Response::HTTP_OK, $response->getStatusCode());
        self::assertSame(['status' => 'Offer removed successfully'], json_decode($response->getContent(), true));
        self::assertCount(0, $offers);
    }

    /** @test */
    public function delete_offer_that_does_not_exist_should_return_an_error(): void
    {
        $response = $this->controller->delete(1);

        self::assertSame(Response::HTTP_NOT_FOUND, $response->getStatusCode());
        self::assertSame(['message' => sprintf('Offer with %d id does not exist', 1)], json_decode($response->getContent(), true));
    }
}
